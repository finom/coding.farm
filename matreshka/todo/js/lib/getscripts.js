"use strict"; //@todo catch errorswindow.getScripts = function() {	var settings = getScripts.settings,		PATH = settings.PATH,		POSTFIX = settings.POSTFIX,		DISABLE_CATCHE = settings.DISABLE_CATCHE,		head = document.head || document.getElementsByTagName( 'head' )[ 0 ],		currentSrcsIndex = 0,		thisArg, callback, args, srcs, script, doneCount;				if( typeof arguments[ arguments.length - 2 ] === 'function' ) {		callback = arguments[ arguments.length - 2 ];		thisArg = arguments[ arguments.length - 1 ];		args = Array.prototype.slice.call( arguments, 0, -2 );	} else if( typeof arguments[ arguments.length - 1 ] === 'function' ) {		callback = arguments[ arguments.length - 1 ];		args = Array.prototype.slice.call( arguments, 0, -1 );	} else {		args = Array.prototype.slice.call( arguments, 0 );	}		var async = function( srcs, asyncCallback ) {		srcs = typeof srcs === 'string' ? [ srcs ] : srcs;		doneCount = 0;		for( var j = 0; j < srcs.length; j++ ) {			var script = document.createElement( 'script' );			script.src = PATH + srcs[ j ] + POSTFIX + ( DISABLE_CATCHE ? '?' + Math.random() : '' );			script.type = 'text/javascript';			script.onerror = script.onload = script.onreadystatechange = function() {				if ( (!this.readyState || this.readyState === "loaded" || this.readyState === "complete" ) ) {					++doneCount === srcs.length && asyncCallback && asyncCallback.call( thisArg );					// Handle memory leak in IE					this.onload = this.onreadystatechange = null;					if ( head && this.parentNode ) {						head.removeChild( this );					}				}			};			head.appendChild( script );		}	};			async( args[ currentSrcsIndex ], function c() {		var srcs = args[ ++currentSrcsIndex ];		if( !srcs ) {			callback && callback.call( thisArg );		} else {			async( srcs, c );		}	});};getScripts.settings = {	PATH: '/',	POSTFIX: '',	DISABLE_CATCHE: false};