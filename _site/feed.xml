<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Finom</title>
    <description>Блог о веб разработке.</description>
    <link>http://coding.farm/</link>
    <atom:link href="http://coding.farm/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Object.defineProperty vs Object.observe</title>
        <description>&lt;p&gt;Не так давно в Хроме появилась потрясающая возможность, описанная в черновике спецификации ECMAScript 7: функция &lt;code&gt;Object.observe&lt;/code&gt;. Она создана для оповещения обо всех изменениях в объекте (см. &lt;a href=&quot;https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/observe&quot;&gt;MDN&lt;/a&gt;). Эта потрясающая возможность позволит сэкономить драгоценные ресурсы процессора во фреймворках и библиотеках, использующих так называемый dirty checking (дословно “грязная проверка”) для контроля изменений данных и перерисовки DOM. Такой подход используется во фрефмворке Angular 1, знаменитый своими тормозами при большом количестве элементов.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// вот сюда попадет &amp;quot;отчет&amp;quot; об изменениях&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [{name: &amp;#39;baz&amp;#39;, object: &amp;lt;obj&amp;gt;, type: &amp;#39;add&amp;#39;}]&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [{name: &amp;#39;foo&amp;#39;, object: &amp;lt;obj&amp;gt;, type: &amp;#39;update&amp;#39;, oldValue: 0}]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [{name: &amp;#39;baz&amp;#39;, object: &amp;lt;obj&amp;gt;, type: &amp;#39;delete&amp;#39;, oldValue: 2}]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Все изменения через небольшой промежуток времени (несколько миллисекунд) попадут в качестве аргумента переданной функции. Хочется сказать “WOW”!&lt;/p&gt;

&lt;p&gt;К моему удивлению, многие забывают о том, что зарегистрировать изменения в объекте можно было и раньше с помощью функции &lt;code&gt;Object.defineProperty&lt;/code&gt;. Функция позволяет навешать на свойство объекта геттер, сеттер и некоторые другие служебные опции, называемые дескриптором свойства.&lt;/p&gt;

&lt;p&gt;Вот так, например, вы создаете свойство &lt;code&gt;key&lt;/code&gt; у объекта, которое:&lt;br /&gt;
- Имеет значение &lt;code&gt;'static'&lt;/code&gt;;&lt;br /&gt;
- Не перечисляется в цикле for..in;&lt;br /&gt;
- Его нельзя переписать (т. е. свойство только для чтения);&lt;br /&gt;
- Ему нельзя переустановить дескриптор (снова запустить &lt;code&gt;Object.defineProperty&lt;/code&gt; с таким же ключем).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;enumerable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;configurable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;writable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;static&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;С геттерами и сеттерами (одним словом их называют акцессоры или accessor, от слова access - доступ) использование функции выглядит так:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ты пытаешься установить свойство &amp;#39;key&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Что тут происходит:&lt;br /&gt;
- При обращении к свойству &lt;code&gt;obj.key&lt;/code&gt;, вызывается функция &lt;code&gt;get&lt;/code&gt;. В данном случае, она просто возвращает число 42, но возвращаемое значение можно и просчитать (например, возвращать &lt;code&gt;Math.random()&lt;/code&gt;, тогда &lt;code&gt;obj.key&lt;/code&gt; будет всегда “содержать” случайное значение при каждом обращении);&lt;br /&gt;
- При каждом присваивании свойству нового значения будет вызываться функция &lt;code&gt;set&lt;/code&gt;, в данном случае, она содержит вызов &lt;code&gt;alert(...)&lt;/code&gt;. Для контроля изменения в объекте нам нужен только сеттер.&lt;/p&gt;

&lt;p&gt;Более подробно можете прочесть в &lt;a href=&quot;https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&quot;&gt;статье на MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Итак, что лучше: &lt;code&gt;Object.defineProperty&lt;/code&gt; или &lt;code&gt;Object.observe&lt;/code&gt;?&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1. Производительность&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://jsperf.com/object-observe-vs-object-defineproperty&quot;&gt;Бенчмарк на jsperf&lt;/a&gt; показал невероятные результаты: скорость обычного сеттера при количестве и тераций &lt;code&gt;1e5&lt;/code&gt; (10 тысяч) выше обзервера в 350 раз!&lt;/p&gt;

&lt;p&gt;Но я предлагаю не сильно обращать внимание на этот тест. Из-за особенностей jsperf тест выглядит неправдоподобным по сравнению с более объективным “консольным тестом”. Откройте консоль и запустите этот код:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// some code which turns off browser optimization&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// some code which turns off browser optimization&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;observe&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;observe&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;defineProperty&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;defineProperty&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;У меня получилось 1592 миллисекунд у Object.observe против 868 у &lt;code&gt;Object.defineProperty&lt;/code&gt;, т. е. первый на 80% медленнее второго. Если уменьшить количество итераций циклов до 10 тысяч, то разница будет более существенной: 32 мсек против 15 мсек.&lt;/p&gt;

&lt;p&gt;Очко в пользу &lt;code&gt;Object.defineProperty&lt;/code&gt;. &lt;em&gt;1:0&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2. Своевременность регистрации изменений&lt;/h3&gt;
&lt;p&gt;Сеттер запускается сразу же, после попытки присваивания значения. Обзервер коллекционирует изменения и отдаёт их асинхронно, когда “основной цикл” разблокирован. Первый вариант, не мой взгляд, лучше: я хочу знать об изменениях сразу, чтобы запустить код, вызывающийся вследствие этих изменений (обычно событие изменения свойства). Обзервер оповестит обо всех изменениях потом.&lt;/p&gt;

&lt;p&gt;У обоих подходов есть вои плюсы. &lt;em&gt;1:0&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;delete&quot;&gt;3. Оператор &lt;code&gt;delete&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Обзервер уведомляет так же и об удалении свойства (не только об изменении). &lt;code&gt;Object.defineProperty&lt;/code&gt;, к сожалению, такой возможности не имеет (хотя, было бы логично её добавить). К сожалению, это огромный камень в огород &lt;code&gt;Object.defineProperty&lt;/code&gt;… &lt;em&gt;1:1&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;4. Что будем слушать?&lt;/h3&gt;
&lt;p&gt;В случае с &lt;code&gt;Object.defineProperty&lt;/code&gt; нам нужно явно указать, какое свойство мы слушаем. Иногде это удобно и хорошо отражается на производительности. В свою очередь, &lt;code&gt;Object.observe&lt;/code&gt; регистрирует изменения всех свойств, без исключения.&lt;/p&gt;

&lt;p&gt;У обоих подходов есть вои плюсы. &lt;em&gt;1:1&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;5. Поддержка браузерами&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;  поддерживается всеми браузерами, начиная с IE8. &lt;code&gt;Object.observe&lt;/code&gt; работает только с браузерах на основе Хромиума.&lt;/p&gt;

&lt;p&gt;Очко в пользу &lt;code&gt;Object.defineProperty&lt;/code&gt;. &lt;em&gt;2:1&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;Вывод&lt;/h3&gt;
&lt;p&gt;Несмотря на плохую поддержку браузерами, &lt;code&gt;Object.observe&lt;/code&gt; это невероятно интересная и по-настоящему революционная возможность. Но, к сожалению, лично для меня, асинхронная задержка является самым главным аргументом против этой функции и я, как и раньше, буду пользоваться сеттерами. Надеюсь, что разработчики спецификаций решат как-нибудь проблему с &lt;code&gt;delete&lt;/code&gt;, либо браузеры, наконец, начнут  внедрять долгожданный &lt;a href=&quot;https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;Proxy&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 +0300</pubDate>
        <link>http://coding.farm/javascript/2015/08/12/object-defineproperty-vs-object-observe/</link>
        <guid isPermaLink="true">http://coding.farm/javascript/2015/08/12/object-defineproperty-vs-object-observe/</guid>
      </item>
    
      <item>
        <title>&quot;Матрешкой по вебу&quot;. Интервью с разработчиком фреймворка Matreshka.js</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Cегодня ко мне в блог заглянул Андрей Губанов - веб-разработчик со стажем и автор набирающего популярность фреймворка “Matreshka.js”.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 12 Aug 2015 00:00:00 +0300</pubDate>
        <link>http://coding.farm/matreshka/2015/08/12/interview/</link>
        <guid isPermaLink="true">http://coding.farm/matreshka/2015/08/12/interview/</guid>
      </item>
    
      <item>
        <title>Выпуск 23: Кушайте овощи, пишите на Матрёшке</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Многие JS разработчики рано или поздно задаются целью написать собственный фреймворк. Не у многих это получается. У нас в гостях один из тех, кому это удалось. Андрей Губанов, автор фреймворка Matreshka.js.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 05 Jun 2015 00:00:00 +0300</pubDate>
        <link>http://coding.farm/matreshka/2015/06/05/radiojs/</link>
        <guid isPermaLink="true">http://coding.farm/matreshka/2015/06/05/radiojs/</guid>
      </item>
    
      <item>
        <title>Matreshka.js by Igor Iakymenko</title>
        <description>&lt;p&gt;Презентация Матрешки Игорем Якименко.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/usz29YCCiHI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Thu, 16 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://coding.farm/matreshka/2015/04/16/matreshka-by-igor-iakimenko/</link>
        <guid isPermaLink="true">http://coding.farm/matreshka/2015/04/16/matreshka-by-igor-iakimenko/</guid>
      </item>
    
      <item>
        <title>10 причин попробовать Матрешку</title>
        <description>&lt;p&gt;Многие фреймворки пытаются починить веб, создавая собственный язык программирования. Идея Матрешки проста: с вебом всё в порядке. Вся логика, которую пишет программист, находится, как и должна, в JavaScript файлах, а HTML остаётся языком разметки гипертекста. Шутка об HTML программисте должна остаться шуткой.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://coding.farm/matreshka/2015/04/10/matreshka-10-reasons/</link>
        <guid isPermaLink="true">http://coding.farm/matreshka/2015/04/10/matreshka-10-reasons/</guid>
      </item>
    
      <item>
        <title>Matreshka.js. От простого к простому</title>
        <description>&lt;p&gt;В этой статье я расскажу, как пользоваться Матрешкой на трех несложных примерах. Мы рассмотрим базовые возможности Матрешки, познакомимся с тем, как работать с данными и разберем коллекции.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://coding.farm/matreshka/2015/04/08/matreshka-from-simple-to-simple/</link>
        <guid isPermaLink="true">http://coding.farm/matreshka/2015/04/08/matreshka-from-simple-to-simple/</guid>
      </item>
    
      <item>
        <title>Вышла первая версия фреймворка Matreshka.js</title>
        <description>&lt;p&gt;Спешу сообщить радостную новость. Наконец, вышла первая (1.0) версия фреймворка Матрешка.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 00:00:00 +0300</pubDate>
        <link>http://coding.farm/matreshka/2015/04/06/matreshka-1/</link>
        <guid isPermaLink="true">http://coding.farm/matreshka/2015/04/06/matreshka-1/</guid>
      </item>
    
  </channel>
</rss>
